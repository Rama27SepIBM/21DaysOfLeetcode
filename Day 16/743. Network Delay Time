class Solution {
    class Pair implements Comparable<Pair>{
        int val;
        int time;
        Pair(int val, int time){
            this.val = val;
            this.time = time;
        }
        public int compareTo(Pair o){
            return this.time - o.time;
        }
    }
    public int networkDelayTime(int[][] times, int n, int k) {
        ArrayList<int[]>[] graph = new ArrayList[n + 1];
        for(int i = 1; i < graph.length; i++){
            graph[i] = new ArrayList<int[]>();
        }
        for(int i = 0; i < times.length; i++){
            int u = times[i][0];
            int v = times[i][1];
            int time = times[i][2];
            graph[u].add(new int[]{v, time});
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        HashSet<Integer> visited = new HashSet<>();
        int minTime = 0;
        pq.add(new Pair(k, 0));
        
        while(!pq.isEmpty()){
            Pair rnode = pq.remove();
            if(visited.contains(rnode.val))
                continue;
            visited.add(rnode.val);
            minTime = rnode.time;
            for(int[] nbr : graph[rnode.val]){
                pq.add(new Pair(nbr[0], rnode.time + nbr[1]));
            }
        }
        if(visited.size() < n)
            return -1;
        return minTime;
    }
}
