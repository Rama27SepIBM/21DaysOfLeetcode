class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<Integer>[] graph = new ArrayList[numCourses];
        
        for(int i = 0; i < graph.length; i++)
            graph[i] = new ArrayList<>();
        
        for(int i = 0; i < prerequisites.length; i++){
            int u = prerequisites[i][0];
            int v = prerequisites[i][1];
            graph[u].add(v);
        }
        
        int[] visited = new int[numCourses];
        
        for(int i = 0; i < graph.length; i++){
            if(visited[i] == 0){
                if(hasCycle(graph, i, visited)){
                    return false;
                }
            }
        }
        return true;
    }
    public boolean hasCycle(ArrayList<Integer>[] graph, int i, int[] visited){
        if(visited[i] == 2)
            return true;
        visited[i] = 2;
        for(int j = 0; j < graph[i].size(); j++){
            int nbr = graph[i].get(j);
            if(visited[nbr] != 1){
                if(hasCycle(graph, nbr, visited))
                    return true;
            }
        }
        visited[i] = 1;
        return false;
    }
}
