class Solution {
    public int snakesAndLadders(int[][] board) {
        int n = board.length;
        int cellValue = 1;
        Pair<Integer, Integer>[] cells = new Pair[n * n + 1];
        Integer[] columns = new Integer[n];
        
        for(int i = 0; i < n; i++){
            columns[i] = i;
        }
        
        for(int row = n - 1; row >= 0; row--){
            for(int column : columns){
                cells[cellValue++] = new Pair<>(row, column);
            }
            Collections.reverse(Arrays.asList(columns));
        }
        int[] minDist = new int[n * n + 1];
        Arrays.fill(minDist, -1);
        
        Deque<Integer> queue = new ArrayDeque<>();
        minDist[1] = 0;
        queue.add(1);
        
        while(!queue.isEmpty()){
            int curr = queue.removeFirst();
            for(int next = curr + 1; next <= Math.min(curr + 6, n * n); next++){
                int row = cells[next].getKey();
                int col = cells[next].getValue();
                
                int dest = board[row][col] != -1 ? board[row][col] : next;
                if(minDist[dest] == -1){
                    minDist[dest] = minDist[curr] + 1;
                    queue.add(dest);
                }
            }
        }
        return minDist[n * n];
    }
}

/*
[[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]

n = 5

*/
