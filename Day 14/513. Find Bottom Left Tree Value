/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashMap<Integer, Integer> map = new HashMap<>();
    int maxLevel = 0;
    public int findBottomLeftValue(TreeNode root) {
        findBottomLeftValue(root, 0);
        return map.get(maxLevel);
    }
    public void findBottomLeftValue(TreeNode root, int level){
        if(root == null){
            return;
        }
        
        if(!map.containsKey(level)){
            map.put(level, root.val);
            maxLevel = level;
        }
        
        findBottomLeftValue(root.left, level + 1);
        findBottomLeftValue(root.right, level + 1);
    }
}

/*
Better Soln
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int value;
    int maxLevel = -1;
    public int findBottomLeftValue(TreeNode root) {
        findBottomLeftValue(root, 0);
        return value;
    }
    public void findBottomLeftValue(TreeNode root, int level){
        if(root == null){
            return;
        }
        
        if(maxLevel < level){
            value = root.val;
            maxLevel = level;
        }
        
        findBottomLeftValue(root.left, level + 1);
        findBottomLeftValue(root.right, level + 1);
    }
}
