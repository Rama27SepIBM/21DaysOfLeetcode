/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashMap<Integer, Integer> map = new HashMap<>();
    int max = Integer.MIN_VALUE;
    
    public int[] findFrequentTreeSum(TreeNode root) {
        findFrequentTreeSumUtil(root);
        List<Integer> result = new ArrayList<>();
        
        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            if((int)entry.getValue() == max){
                result.add(entry.getKey());
            }
        }
        int[] ans = new int[result.size()];
        for(int i = 0; i < ans.length; i++){
            ans[i] = result.get(i);
        }
        return ans;
    }
    public int findFrequentTreeSumUtil(TreeNode root){
        if(root == null)
            return 0;
        
        int leftSum = findFrequentTreeSumUtil(root.left);
        int rightSum = findFrequentTreeSumUtil(root.right);
        
        int curr_sum = root.val + leftSum + rightSum;
        
        map.put(curr_sum, map.getOrDefault(curr_sum, 0) + 1);
        max = Math.max(max, map.get(curr_sum));
        return curr_sum;
    }
}
